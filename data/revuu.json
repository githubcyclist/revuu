{
  "tasks": [
    {
      "instructions": "(Node.js) Create an object literal with properties and function\n\nCreate a johnDoe object literal with firstName and lastName properties\nand greet function. Calling the function should output to the console\nthe message, \"Hi, I'm John Doe.\"",
      "tags": [
        "node",
        "object literals",
        "properties",
        "functions"
      ],
      "score": 3,
      "saved": true,
      "lang": "Node.js",
      "id": 10,
      "date_started": "2018-09-26T07:56:54-04:00",
      "next_review_date": "2018-10-02T13:20:15-04:00",
      "all_reviews": [
        {
          "score": 3,
          "review_date": "2018-09-26T08:01:25-04:00"
        },
        {
          "score": 3,
          "review_date": "2018-09-29T01:43:22-04:00"
        }
      ]
    },
    {
      "instructions": "(Ruby) Calling class, instance, and global methods\n\n(1) From ::create_with_num, set num equal to ::class_number, then (within the\nsame method) return an instance of MyClass with (number: num) as an argument. \n(2) Use ::create_with_num to create an instance. (3) Let #my_sum = the \nsum of @number, ::class_number_deux, #instance_number, and global_number. \n(4) Print the result of calling #my_sum on the instance. Should be 27.\n\nclass MyClass\n  class << self\n    def class_number; 5; end\n\n    def class_number_deux; 2; end\n\n    def create_with_num\n      # Type here\n    end\n  end\n\n  attr_accessor :number\n\n  def initialize(args)\n    # Type here\n  end\n\n  def instance_number; 10; end\n\n  def my_sum\n    # Type here\n  end\n\nend\n\ndef global_number; 10; end\n# Type here",
      "tags": [
        "ruby",
        "self",
        "class",
        "new"
      ],
      "score": 3,
      "saved": true,
      "lang": "Ruby",
      "id": 5,
      "date_started": "2018-09-25T05:56:23-04:00",
      "next_review_date": "2018-10-02T15:30:00-04:00",
      "all_reviews": [
        {
          "score": 3,
          "review_date": "2018-09-25T07:35:36-04:00"
        }
      ]
    },
    {
      "instructions": "(Node.js) Validate strings are numeric without converting to integer\n\nPass the values in the array ['99', '23a', 'xyz'] to a ternary \noperator to output 'x is numeric' or 'x is not numeric' in each case \nas appropriate. (Only the first item is numeric.) Do *not* convert \nthe strings into integers; use a simple handy method.",
      "tags": [
        "Node.js",
        "JavaScript",
        "node",
        "isNaN",
        "ternary"
      ],
      "score": 3,
      "saved": true,
      "lang": "Node.js",
      "id": 15,
      "date_started": "2018-09-28T10:29:35-04:00",
      "next_review_date": "2018-10-03T11:04:13-04:00",
      "all_reviews": [

      ]
    },
    {
      "instructions": "(Ruby) 'For...in' inclusive vs. exclusive\n\nFirst, construct the array of numbers 1 through 5 very concisely,\nusing a range operator. Then use a form of Ruby's for...in loop \nsyntactic sugar to multiply these numbers by 3 (printing the result \nafter each). Then construct a duplicate array using another form of\nthe range operator. Demonstrate which range operator is *inclusive* \nand which is *exclusive*; be able to say in advance which operator\ndoes what.",
      "tags": [
        "ruby",
        "for",
        "inclusive",
        "exclusive",
        "range",
        "range operator",
        "to_a"
      ],
      "score": 3,
      "saved": true,
      "lang": "Ruby",
      "id": 16,
      "date_started": "2018-09-29T21:36:49-04:00",
      "next_review_date": "2018-10-03T21:55:41-04:00",
      "all_reviews": [
        {
          "score": 3,
          "review_date": "2018-09-29T21:55:41-04:00"
        }
      ]
    },
    {
      "instructions": "(C) Write \"Hello world!\"",
      "tags": [
        "C",
        "int",
        "main",
        "printf"
      ],
      "score": 3,
      "saved": true,
      "lang": "C",
      "id": 1,
      "date_started": "2018-09-23T00:00:00+00:00",
      "next_review_date": "2018-10-07T05:34:30-04:00",
      "all_reviews": [
        {
          "score": 5,
          "review_date": "2018-09-26T22:06:40-04:00"
        },
        {
          "score": 3,
          "review_date": "2018-09-27T05:34:03-04:00"
        }
      ]
    },
    {
      "instructions": "(Ruby) Shortcut for def self.my_class_method?\nGiven this little class, how can you abbreviate 'def self.my_class_method'\nand 'def self.my_other_class_method'?\n\nRewrite it, and then call the methods (one line per each) outside the \nclass definition.\n\nclass MyClass\n  def self.my_class_method\n    puts \"You successfully called my class method! Woo hoo!\"\n  end\n\n  def self.my_other_class_method\n    puts \"Oh my god you did it twice!\"\n  end\nend",
      "tags": [
        "ruby",
        "class << self",
        "self",
        "class methods"
      ],
      "score": 4,
      "saved": true,
      "lang": "Ruby",
      "id": 4,
      "date_started": "2018-09-25T03:29:33-04:00",
      "next_review_date": "2018-10-09T03:42:08-04:00",
      "all_reviews": [
        {
          "score": 3,
          "review_date": "2018-09-25T03:42:08-04:00"
        }
      ]
    },
    {
      "instructions": "(Ruby) Iteration control\n\nIn the following loop, use three different keywords that offer control\nof an interating loop in order so that the 'numbers' array prints out\nas [1, 1, 1, 3, 5, 7, 9]. (I.e., all odd; stop at 9; and repeat the\nfirst three numbers.) You will need to add just two lines to the loop,\nas well as adding one word in place of <fill in>.\n\nnumbers = []\nthree_ones = [1, 1, 1]\n10.times do |i|\n  next if i%2 == 0\n  numbers << i\n  redo unless numbers == three_ones or i > 1\n  i += 1\n  break if i == 10\nend\nprint numbers\nputs ''",
      "tags": [
        "ruby",
        "break",
        "next",
        "redo"
      ],
      "score": 3,
      "saved": true,
      "lang": "Ruby",
      "id": 17,
      "date_started": "2018-09-29T22:20:38-04:00",
      "next_review_date": "2018-10-01T12:00:00-04:00",
      "all_reviews": [
        {
          "score": 3,
          "review_date": "2018-09-29T22:47:04-04:00"
        }
      ]
    },
    {
      "instructions": "(Ruby) Using defaults in instance initialization\n\nThe following defaults are problematic for reasons Sandi Metz explained.\nMove them into a method and use the method in #initialize. Ensure the \nanswers remain the same.\n\nclass Dog\n  attr_accessor :cute, :breed, :weight\n  def initialize(args)\n    @cute   = args[:cute]   || false\n    @breed  = args[:breed]  || 'mutt'\n    @weight = args[:weight] || 15\n  end\nend\nlassie = Dog.new(cute: true, breed: 'collie')\nputs lassie.cute   # true\nputs lassie.breed  # collie\nputs lassie.weight # 15\nrover = Dog.new\nputs rover.breed   # mutt",
      "tags": [
        "ruby",
        "defaults",
        "initialize",
        "merge",
        "optional arguments",
        "default arguments"
      ],
      "score": 4,
      "saved": true,
      "lang": "Ruby",
      "id": 6,
      "date_started": "2018-09-25T08:24:11-04:00",
      "next_review_date": "2018-10-16T14:37:03-04:00",
      "all_reviews": [
        {
          "score": 4,
          "review_date": "2018-09-25T14:37:03-04:00"
        }
      ]
    },
    {
      "instructions": "(Node.js) Use ASCII escape sequences correctly\n\nRewrite the strings 'Band-Aid(r)' and '98.6 degrees F' to include the (r)\nand degree symbols, using Unicode and hexadecimal escape sequences (both\n--which you can, of course, look up). Then print 'hi' using the same sort \nof sequences. (No using String.fromCharCode(); that will be a separate \nquestion.)",
      "tags": [
        "JavaScript",
        "Node.js",
        "node",
        "escape sequences",
        "ASCII"
      ],
      "score": 4,
      "saved": true,
      "lang": "Node.js",
      "id": 14,
      "date_started": "2018-09-28T09:22:08-04:00",
      "next_review_date": "2018-10-20T19:46:41-04:00",
      "all_reviews": [
        {
          "score": 4,
          "review_date": "2018-09-29T19:46:41-04:00"
        }
      ]
    },
    {
      "instructions": "(Ruby) Create and use a \"cubed\" proc\n\nCreate a proc that cubes (raised to the third power) a number; then use it\nto find 3 cubed (27). Then create a lambda using more verbose syntax that \nraises a number to the fourth power and use it to find 7^4 (2401). Finally, \ncreate a lamdba using briefer syntax and user it to find 13^6 (4826809).",
      "tags": [
        "ruby",
        "Proc",
        "Proc#new",
        "procs",
        "lambda",
        "lambda literal",
        "exponents"
      ],
      "score": 4,
      "saved": true,
      "lang": "Ruby",
      "id": 7,
      "date_started": "2018-09-25T15:19:06-04:00",
      "next_review_date": "2018-10-21T00:23:33-04:00",
      "all_reviews": [
        {
          "score": 3,
          "review_date": "2018-09-25T15:48:43-04:00"
        },
        {
          "score": 4,
          "review_date": "2018-09-26T00:23:33-04:00"
        }
      ]
    },
    {
      "instructions": "(Ruby) Substitute all instances of this with that\n\nIn the following string, replace every instance of 'ae' with 'e'. Don't use\nregular expressions; use a simple method. Print the result.\n\n\"Encyclopaedias make me feel so anaemic that I need anaesthesia.\"",
      "tags": [
        "ruby",
        "gsub",
        "gsub!"
      ],
      "score": 4,
      "saved": true,
      "lang": "Ruby",
      "id": 8,
      "date_started": "2018-09-25T16:34:55-04:00",
      "next_review_date": "2018-11-03T20:31:42-04:00",
      "all_reviews": [
        {
          "score": 4,
          "review_date": "2018-09-25T16:38:07-04:00"
        },
        {
          "score": 4,
          "review_date": "2018-09-29T20:31:42-04:00"
        }
      ]
    },
    {
      "instructions": "(Node.js) Show how prefix and postfix incrementing works\n\nBegin a short script with this:\n\n  var num = 10;\n\nOn the next line, increment num and, *in the same expression*, subtract \n10 from it, showing the result in the console. Then reset num to 10 and \nperform the same difference, but increment num in a different way.\n(There are two ways to increment, which will show the two different \nanswers.) Print the two different answers to the console. Be able to \npredict, in advance, which answer will be 0 and what the other answer \nwill be.\n\nThen, beginning at 1, *de*crement num and add 10 to it, ensuring that \nthe sum is 10. Make sure you are able to tell, in advance, which \ndecrement operator to use.\n\nFinally, say in advance and then demonstrate what num2 will be:\n\n  num = 1;\n  num2 = (num++ * 10 + 1);\n  console.log(num2);",
      "tags": [
        "Node.js",
        "node",
        "javascript",
        "operators",
        "prefix",
        "postfix",
        "increment",
        "decrement",
        "order of operations"
      ],
      "score": 4,
      "saved": true,
      "lang": "Node.js",
      "id": 13,
      "date_started": "2018-09-28T08:35:51-04:00",
      "next_review_date": "2018-11-10T19:26:54-05:00",
      "all_reviews": [
        {
          "score": 4,
          "review_date": "2018-09-29T20:26:54-04:00"
        }
      ]
    },
    {
      "instructions": "(Java) Write \"Hello World!\"",
      "tags": [
        "java",
        "hello world"
      ],
      "score": 5,
      "saved": true,
      "lang": "Java",
      "id": 11,
      "date_started": "2018-09-26T21:21:47-04:00",
      "next_review_date": "2018-11-27T04:51:10-05:00",
      "all_reviews": [
        {
          "score": 5,
          "review_date": "2018-09-27T04:51:10-04:00"
        }
      ]
    },
    {
      "instructions": "(C) How to print a formatted table \nwith while, for, and different data types\n\nIn the following C program, add a line that prints first fahrenheit, \nthen a tab, then celsius, then a newline. Then change fahr and celsius\nso that they are floats (and try printing then). Then print the values\nfrom -20 to 120 counting by 10s. Finally, rewrite the 'while' loop with\na 'for' loop and remove all variables except fahr. Ensure the field\ntype characters are correct throughout (so, no error messages!).\n\n#include <stdio.h>\nint main() {\n    int fahr, celsius;\n    int lower, upper, step;\n    lower = 0;    /* lower limit of temperature table */\n    upper = 300;  /* upper limit */\n    step = 20;    /* step size */\n\n    fahr = lower;\n    while (fahr <= upper) {\n        celsius = (5.0/9) * (fahr-32);\n\t/* fill in this line */\n        fahr = fahr + step;\n    }\n}",
      "tags": [
        "C",
        "printf",
        "while",
        "for",
        "data types",
        "type characters"
      ],
      "score": 4,
      "saved": true,
      "lang": "C",
      "id": 12,
      "date_started": "2018-09-27T04:50:29-04:00",
      "next_review_date": "2018-11-28T04:14:12-05:00",
      "all_reviews": [
        {
          "score": 4,
          "review_date": "2018-09-28T04:14:12-04:00"
        }
      ]
    },
    {
      "instructions": "(Bash) Download this URL\n\nOn the command line, download the HTML you'll find at precisely \nhttp://larrysanger.org/. Save it directly into temp.tmp. \nTo the end of that file, append \"This is another line.\" Then \nview the end of the file to confirm it's all there, then delete \ntemp.tmp.",
      "tags": [
        "bash",
        "curl",
        "pipe",
        "redirect",
        "append"
      ],
      "score": 4,
      "saved": true,
      "lang": "Bash",
      "id": 9,
      "date_started": "2018-09-25T16:57:25-04:00",
      "next_review_date": "2018-12-18T16:09:35-05:00",
      "all_reviews": [
        {
          "score": 4,
          "review_date": "2018-09-25T17:08:51-04:00"
        }
      ]
    },
    {
      "instructions": "(Ruby) Palindromes: given ['xanax', 'Hello', 'aya', 'FooBar'], write a brief \nprogram to show that there are two palindromes in the array; then print them. \nThen change all the items to Title Case (and print); then change them all to \nALL CAPS (and print); finally, change them all to all lowercase (and print).",
      "tags": [
        "ruby",
        "reverse",
        "count",
        "select",
        "upcase",
        "downcase",
        "capitalize"
      ],
      "score": 4,
      "saved": true,
      "lang": "Ruby",
      "id": 2,
      "date_started": "2018-09-23T22:32:33-04:00",
      "next_review_date": "2019-02-24T18:50:49-05:00",
      "all_reviews": [
        {
          "score": 4,
          "review_date": "2018-09-24T18:50:49-04:00"
        }
      ]
    },
    {
      "instructions": "(Ruby) Multidimensional array\n\nBy referring to positions of the numbers in this array,\n\na = [[5, 4], [3, 6, 2, [1, 7]], [[8]], [[[9], 10]] ]\n\nconstruct this array:\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
      "tags": null,
      "score": 5,
      "saved": true,
      "lang": "Ruby",
      "id": 18,
      "date_started": "2018-09-29T23:08:24-04:00",
      "next_review_date": "2019-06-29T23:15:43-04:00",
      "all_reviews": [
        {
          "score": 5,
          "review_date": "2018-09-29T23:15:21-04:00"
        }
      ]
    }
  ]
}